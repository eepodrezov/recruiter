[
    {
        "id": 1,
        "question": "Как исправить последний коммит, не создавая новый?",
        "answer": "Используйте команду `git commit --amend`, чтобы изменить последний коммит без создания нового."
    },
    {
        "id": 2,
        "question": "В чем разница между `git rebase` и `git merge`? Когда что использовать?",
        "answer": "`git merge` сохраняет историю ветвления, а `git rebase` переписывает её, делая линейной. Rebase предпочтителен для чистой истории, merge — для сохранения контекста."
    },
    {
        "id": 3,
        "question": "Как перенести отдельный коммит из одной ветки в другую?",
        "answer": "Выполните `git cherry-pick [хеш коммита]` в целевой ветке."
    },
    {
        "id": 4,
        "question": "Как разрешить конфликт слияния, если два разработчика изменили одну строку кода?",
        "answer": "Разрешите вручную, выбрав нужный вариант в редакторе, удалите конфликтные маркеры и выполните `git add` и `git commit`."
    },
    {
        "id": 5,
        "question": "Как можно оптимизировать загрузку SPA (Single Page Application)?",
        "answer": "Использовать lazy-loading, code-splitting, оптимизировать изображения, применять CDN и предварительную отрисовку (SSR/SSG)."
    },
    {
        "id": 6,
        "question": "Чем JWT-токен отличается от сессионной аутентификации?",
        "answer": "JWT хранит данные аутентификации на клиенте (чаще в localStorage), сессии — на сервере. JWT масштабируемее, но требует защиты от XSS."
    },
    {
        "id": 7,
        "question": "В чем преимущества и недостатки микросервисов перед монолитом?",
        "answer": "Микросервисы легче масштабировать и поддерживать, но сложнее в развертывании и требуют продуманной архитектуры взаимодействия."
    },
    {
        "id": 8,
        "question": "Какие протоколы используются для API и в чем их ключевые отличия?",
        "answer": "REST — простота и универсальность, GraphQL — гибкие запросы, gRPC — высокая производительность и бинарный формат."
    },
    {
        "id": 9,
        "question": "Как React/Vue управляют виртуальным DOM и зачем это нужно?",
        "answer": "Они используют виртуальный DOM для минимизации манипуляций с реальным DOM и повышения производительности UI."
    },
    {
        "id": 10,
        "question": "Как эффективно найти дубликаты в массиве?",
        "answer": "С помощью `Set`, фильтрации или объекта (словаря) для отслеживания встреченных элементов."
    },
    {
        "id": 11,
        "question": "В чем разница между массивом и связным списком?",
        "answer": "Массивы обеспечивают быстрый доступ по индексу, а связные списки — быструю вставку и удаление элементов."
    },
    {
        "id": 12,
        "question": "Как работает хеш-таблица? Какие могут быть коллизии и как их решать?",
        "answer": "Хеш-таблица использует хеш-функции для доступа к данным. Коллизии решаются методом цепочек или открытой адресации."
    },
    {
        "id": 13,
        "question": "Напиши рекурсивную функцию для обхода дерева (например, DOM или JSON).",
        "answer": "Пример: `function traverse(node) { console.log(node); node.children?.forEach(traverse); }`"
    },
    {
        "id": 14,
        "question": "Как защитить frontend от XSS-атак?",
        "answer": "Не вставлять данные напрямую в HTML, использовать `textContent`, применять Content Security Policy (CSP)."
    },
    {
        "id": 15,
        "question": "Зачем нужен `SameSite` атрибут у cookie?",
        "answer": "Он ограничивает отправку cookie в кросс-доменных запросах, предотвращая CSRF-атаки."
    },
    {
        "id": 16,
        "question": "В чем разница между симметричным и асимметричным шифрованием?",
        "answer": "Симметричное использует один ключ, асимметричное — пару публичного и приватного ключей."
    },
    {
        "id": 17,
        "question": "Как работает HTTPS (SSL/TLS)?",
        "answer": "Шифрует данные между клиентом и сервером с помощью сертификатов и TLS-рукопожатия."
    },
    {
        "id": 18,
        "question": "Почему нельзя хранить токены в `localStorage`?",
        "answer": "Потому что они уязвимы к XSS-атакам. Лучше использовать `HttpOnly` cookie."
    },
    {
        "id": 19,
        "question": "Какие есть способы интеграции между frontend и backend?",
        "answer": "REST API, GraphQL, WebSocket, gRPC, и прямой обмен через Message Queue."
    },
    {
        "id": 20,
        "question": "Как оптимизировать количество API-запросов?",
        "answer": "Дебаунсинг, кэширование, агрегация данных, pagination и запросы по необходимости (lazy load)."
    },
    {
        "id": 21,
        "question": "В чем разница между REST и WebSocket? Когда что использовать?",
        "answer": "REST — запрос-ответ, WebSocket — постоянное соединение. WebSocket — для real-time, REST — для CRUD-запросов."
    },
    {
        "id": 22,
        "question": "Как организовать версионирование API?",
        "answer": "Через URL (v1, v2), через заголовки или параметры запроса. Важно сохранить обратную совместимость."
    },
    {
        "id": 23,
        "question": "В чем разница между `localStorage`, `sessionStorage` и cookies?",
        "answer": "`localStorage` — хранение без срока, `sessionStorage` — на время сессии, `cookies` — доступны серверу."
    },
    {
        "id": 24,
        "question": "Как правильно кэшировать данные на frontend?",
        "answer": "Использовать браузерное хранилище, сервис-воркеры, библиотеки (SWR, React Query)."
    },
    {
        "id": 25,
        "question": "Какие есть стратегии инвалидации кэша?",
        "answer": "Time-based (TTL), ручная инвалидация, обновление по событию (stale-while-revalidate)."
    },
    {
        "id": 26,
        "question": "Зачем IndexedDB и в каких случаях его использовать?",
        "answer": "Для хранения больших объемов структурированных данных и оффлайн-приложений."
    },
    {
        "id": 27,
        "question": "Как в JavaScript реализовать инкапсуляцию?",
        "answer": "Через замыкания, приватные поля `#`, или модули (IIFE, ES6 modules)."
    },
    {
        "id": 28,
        "question": "В чем разница между классическим наследованием и композицией?",
        "answer": "Наследование — иерархия, композиция — сборка поведения. Композиция гибче и масштабируемее."
    },
    {
        "id": 29,
        "question": "Как SOLID применяется во frontend?",
        "answer": "Принципы SOLID применимы при проектировании компонентов, хуков и архитектуры приложений."
    },
    {
        "id": 30,
        "question": "Что такое микрофронтенды и какие у них плюсы/минусы?",
        "answer": "Разделение UI на независимые модули. Плюсы — масштабируемость, минусы — сложность интеграции."
    },
    {
        "id": 31,
        "question": "Как работают CSS-препроцессоры (SASS/LESS)?",
        "answer": "Они добавляют переменные, вложенность, миксины и функции к CSS, повышая читаемость и поддержку."
    },
    {
        "id": 32,
        "question": "Как оптимизировать загрузку стилей?",
        "answer": "Использовать критический CSS, lazy-loading, code splitting, убрать неиспользуемые стили."
    },
    {
        "id": 33,
        "question": "В чем разница между `display: none` и `visibility: hidden`?",
        "answer": "`display: none` полностью убирает элемент из потока, `visibility: hidden` — скрывает, но сохраняет место."
    },
    {
        "id": 34,
        "question": "Как работает `Virtual DOM` в React?",
        "answer": "React создает виртуальное дерево и сравнивает его с предыдущим для минимальных обновлений реального DOM."
    },
    {
        "id": 35,
        "question": "Какие пункты относятся к web accessibility в контексте фронт-енд архитектуры?",
        "answer": "Использование цветовых схем с достаточным контрастом + Использование семантического HTML"
    },
    {
        "id": 36,
        "question": "В чем преимущество WebSockets по сравнению с HTTP-запросами?",
        "answer": "WebSockets позволяют устанавливать двустороннее соединение между клиентом и сервером"
    },
    {
        "id": 37,
        "question": "Что позволяет делать механизм CORS?",
        "answer": "Установить правила доступа для ресурсов на других доменах (сервер)"
    },
    {
        "id": 38,
        "question": "Выберите способы, которыми НЕ может осуществляться аутентификация:",
        "answer": "По айпи адресу пользователя"
    },
    {
        "id": 39,
        "question": "Какие механизмы описаны в сценарии входа по номеру телефона и коду из SMS?",
        "answer": "Идентификация + Аутентификация"
    },
    {
        "id": 40,
        "question": "Что такое замыкание в JavaScript?",
        "answer": "Способность функции сохранять доступ к переменным из внешнего контекста выполнения"
    },
    {
        "id": 41,
        "question": "Чему равна асимптотическая сложность операций в хеш-таблице?",
        "answer": "O(1)"
    },
    {
        "id": 42,
        "question": "Какова временная сложность добавления элемента в отсортированный связанный список?",
        "answer": "Линейная O(N)"
    },
    {
        "id": 43,
        "question": "Как работает алгоритм сортировки пузырьком?",
        "answer": "Сравнивает соседние элементы и меняет их местами, повторяя проходы до полной сортировки"
    },
    {
        "id": 44,
        "question": "Что отражает максимальная временная сложность алгоритма?",
        "answer": "Время работы в худшем случае для всех входов размера N"
    },
    {
        "id": 45,
        "question": "Что дает передача хеша данных по защищенному каналу?",
        "answer": "Получатель может проверить целостность данных"
    },
    {
        "id": 46,
        "question": "Что нужно для расшифровки по симметричной схеме?",
        "answer": "Тот же ключ, что использовался для шифрования"
    },
    {
        "id": 47,
        "question": "Верные утверждения об электронной подписи:",
        "answer": "Создается закрытым ключом + Проверяется открытым ключом"
    },
    {
        "id": 48,
        "question": "Основные виды уязвимостей веб-приложений:",
        "answer": "SQL-инъекции, CSRF, XSS, недостатки авторизации, слабые пароли, отсутствие шифрования, уязвимости аутентификации"
    },
    {
        "id": 49,
        "question": "Для чего используется SHA-256?",
        "answer": "Создание цифровых подписей и проверка целостности данных"
    },
    {
        "id": 50,
        "question": "Верное утверждение о HTTP cookie:",
        "answer": "Позволяют добавить состояние в протокол HTTP"
    },
    {
        "id": 51,
        "question": "Docker Image - это...",
        "answer": "Изолированный образ файловой системы"
    },
    {
        "id": 52,
        "question": "Верные утверждения о Docker:",
        "answer": "Управление контейнерами + Изоляция процессов"
    },
    {
        "id": 53,
        "question": "В каких структурах данных сложность операций O(N) и O(1)?",
        "answer": "List – O(N) + Hash table – O(1)"
    },
    {
        "id": 54,
        "question": "Выберите верные утверждения о Docker",
        "answer": "Используется для управления контейнерами + Используется для изоляции процессов"
    },
    {
        "id": 55,
        "question": "Какой HTTP-метод используется для частичного обновления ресурса в REST API?",
        "answer": "PATCH"
    },
    {
        "id": 56,
        "question": "С чем помогает использование Web API?",
        "answer": "Создание сервис-ориентированных приложений для передачи асинхронных данных"
    },
    {
        "id": 57,
        "question": "Что означает HTTP-код 401?",
        "answer": "Unauthorized - клиент не предоставил или предоставил недействительные учетные данные"
    },
    {
        "id": 58,
        "question": "Что можно использовать для вызова операций на удаленной системе?",
        "answer": "RPC"
    },
    {
        "id": 59,
        "question": "Что такое JWT?",
        "answer": "Стандартизированный, подписанный/зашифрованный формат для безопасной передачи данных"
    },
    {
        "id": 60,
        "question": "Что такое LocalStorage?",
        "answer": "Хранилище пар ключ-значение, не отправляющее данные на сервер"
    },
    {
        "id": 61,
        "question": "Какой жизненный цикл у sessionStorage?",
        "answer": "Данные удаляются после закрытия окна/браузера"
    },
    {
        "id": 62,
        "question": "Для чего используется encodeURIComponent?",
        "answer": "Для подготовки строк к записи в document.cookie"
    },
    {
        "id": 63,
        "question": "Что НЕ может использоваться с Service Workers?",
        "answer": "localStorage"
    },
    {
        "id": 64,
        "question": "Какая технология НЕ используется для кэширования?",
        "answer": "SessionStorage"
    },
    {
        "id": 65,
        "question": "Вызов переопределенного метода по ссылке родительского класса - это...",
        "answer": "Полиморфизм"
    },
    {
        "id": 66,
        "question": "Какие разновидности классов используются в ООП?",
        "answer": "Обычные классы + Абстрактные классы + Интерфейсные классы"
    },
    {
        "id": 67,
        "question": "Класс содержит функциональность другого класса - это...",
        "answer": "Делегирование"
    },
    {
        "id": 68,
        "question": "Где можно вызвать приватный метод класса?",
        "answer": "Только внутри этого класса"
    },
    {
        "id": 69,
        "question": "Какой принцип SOLID описывает расширяемость без модификации исходного кода?",
        "answer": "Open-closed"
    },
    {
        "id": 70,
        "question": "Нарушение какого принципа SOLID демонстрирует класс BookReader?",
        "answer": "Liskov substitution"
    },
    {
        "id": 71,
        "question": "Какие команды объединяет git pull?",
        "answer": "fetch + merge"
    },
    {
        "id": 72,
        "question": "Что делает git commit --amend?",
        "answer": "Изменяет последний коммит"
    }
]